/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package co.edu.usbbog.datan.niote.recursos.pantallaPrincipal;

import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.JTree;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeNode;
import javax.swing.tree.TreeSelectionModel;

/**
 *
 * @author Camilo y Roberth
 */
public class ArbolProyectosJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ArbolProyectosJPanel
     */
    public ArbolProyectosJPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jMenuItemCerrar = new javax.swing.JMenuItem();
        jMenuItemEjecutar = new javax.swing.JMenuItem();
        jMenuItemBorrar = new javax.swing.JMenuItem();
        jMenuItemRenombrar = new javax.swing.JMenuItem();
        jMenuItemPropiedades = new javax.swing.JMenuItem();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTreeProjects = new javax.swing.JTree();

        jMenuItemCerrar.setText("Cerrar");
        jMenuItemCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCerrarActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItemCerrar);

        jMenuItemEjecutar.setText("Ejecutar");
        jPopupMenu1.add(jMenuItemEjecutar);

        jMenuItemBorrar.setText("Borrar");
        jPopupMenu1.add(jMenuItemBorrar);

        jMenuItemRenombrar.setText("Renombrar");
        jPopupMenu1.add(jMenuItemRenombrar);

        jMenuItemPropiedades.setText("Propiedades");
        jPopupMenu1.add(jMenuItemPropiedades);

        jTreeProjects.setBackground(new java.awt.Color(45, 45, 45));
        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Proyectos");
        jTreeProjects.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jTreeProjects.setToolTipText("");
        jTreeProjects.setComponentPopupMenu(jPopupMenu1);
        jTreeProjects.setName(""); // NOI18N
        jTreeProjects.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTreeProjectsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTreeProjects);
        jTreeProjects.getAccessibleContext().setAccessibleName("");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 317, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 397, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jTreeProjectsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTreeProjectsMouseClicked
        // Method to get the selected project and catch the name
        methodToCatchProjectName();
    }//GEN-LAST:event_jTreeProjectsMouseClicked

    private void jMenuItemCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCerrarActionPerformed
        deleteProjects();        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItemCerrarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem jMenuItemBorrar;
    private javax.swing.JMenuItem jMenuItemCerrar;
    private javax.swing.JMenuItem jMenuItemEjecutar;
    private javax.swing.JMenuItem jMenuItemPropiedades;
    private javax.swing.JMenuItem jMenuItemRenombrar;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTree jTreeProjects;
    // End of variables declaration//GEN-END:variables

    /**
     * Method to get the selected project and catch the name
     */
    public void methodToCatchProjectName() {
        // Display Selected Node Text Into JTextFields

        TreeSelectionModel smd = jTreeProjects.getSelectionModel();
        if (smd.getSelectionCount() > 0) {
            DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) jTreeProjects.getSelectionPath().getLastPathComponent();
            String projectToErase = selectedNode.getUserObject().toString();
        }
    }

    /**
     * Method to add a new project to the tree
     *
     * @param ProjectName
     */
    public void joinedProjects(String ProjectName) {
        DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) jTreeProjects.getSelectionPath().getLastPathComponent();
        DefaultMutableTreeNode newNode = new DefaultMutableTreeNode(ProjectName);
        selectedNode.add(newNode);
        // Reload jTree model
        DefaultTreeModel model = (DefaultTreeModel) jTreeProjects.getModel();
        model.reload();
    }

    /**
     * Method to delete a new project to the tree
     */
    public void deleteProjects() {

        DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) jTreeProjects.getSelectionPath().getLastPathComponent();

        if (selectedNode != jTreeProjects.getModel().getRoot()) {
            DefaultTreeModel model = (DefaultTreeModel) jTreeProjects.getModel();

            model.removeNodeFromParent(selectedNode);

            model.reload();
        }
    }

}
