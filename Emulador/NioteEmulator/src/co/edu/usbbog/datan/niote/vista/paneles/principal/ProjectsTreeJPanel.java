/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package co.edu.usbbog.datan.niote.vista.paneles.principal;

import co.edu.usbbog.datan.niote.controlador.logica.GestionRed;
import co.edu.usbbog.datan.niote.vista.Principal;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTree;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeSelectionModel;

/**
 * @author Camilo Andrés Díaz Gómez.
 * @version 1.0
 * @since August 2020.
 */
public class ProjectsTreeJPanel extends javax.swing.JPanel {

    /**
     * Relations and variables
     */
    private Principal principal;
    private DefaultMutableTreeNode carpetaRaiz;
    private DefaultTreeModel modelo;

    /**
     * Creates new form ArbolProyectosJPanel
     */
    public ProjectsTreeJPanel(Principal principal) {
        this.principal = principal;
        this.carpetaRaiz = new DefaultMutableTreeNode("Proyectos");
        this.modelo = new DefaultTreeModel(carpetaRaiz);
        jTreeProjects = new JTree(modelo);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jMenuItemCerrar = new javax.swing.JMenuItem();
        jMenuItemEjecutar = new javax.swing.JMenuItem();
        jMenuItemBorrar = new javax.swing.JMenuItem();
        jMenuItemRenombrar = new javax.swing.JMenuItem();
        jMenuItemPropiedades = new javax.swing.JMenuItem();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTreeProjects = new javax.swing.JTree();

        jMenuItemCerrar.setText("Cerrar");
        jMenuItemCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCerrarActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItemCerrar);

        jMenuItemEjecutar.setText("Ejecutar");
        jPopupMenu1.add(jMenuItemEjecutar);

        jMenuItemBorrar.setText("Borrar");
        jMenuItemBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemBorrarActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItemBorrar);

        jMenuItemRenombrar.setText("Renombrar");
        jPopupMenu1.add(jMenuItemRenombrar);

        jMenuItemPropiedades.setText("Propiedades");
        jPopupMenu1.add(jMenuItemPropiedades);

        jScrollPane1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));

        jTreeProjects.setBackground(new java.awt.Color(45, 45, 45));
        jTreeProjects.setModel(modelo
        );
        jTreeProjects.setToolTipText("");
        jTreeProjects.setComponentPopupMenu(jPopupMenu1);
        jTreeProjects.setFocusable(false);
        jTreeProjects.setName(""); // NOI18N
        jTreeProjects.setRequestFocusEnabled(false);
        jTreeProjects.setScrollsOnExpand(false);
        jTreeProjects.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTreeProjectsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTreeProjects);
        jTreeProjects.getAccessibleContext().setAccessibleName("");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 317, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 397, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jTreeProjectsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTreeProjectsMouseClicked
        // Method to get the selected project and catch the name
        //VERIFICAR
        methodToCatchProjectName();
    }//GEN-LAST:event_jTreeProjectsMouseClicked

    private void jMenuItemCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCerrarActionPerformed
        closeProject();
        jTreeProjects.clearSelection();
    }//GEN-LAST:event_jMenuItemCerrarActionPerformed

    private void jMenuItemBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemBorrarActionPerformed
        try {
            deleteProjects();
        } catch (IOException ex) {
            Logger.getLogger(ProjectsTreeJPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItemBorrarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem jMenuItemBorrar;
    private javax.swing.JMenuItem jMenuItemCerrar;
    private javax.swing.JMenuItem jMenuItemEjecutar;
    private javax.swing.JMenuItem jMenuItemPropiedades;
    private javax.swing.JMenuItem jMenuItemRenombrar;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTree jTreeProjects;
    // End of variables declaration//GEN-END:variables

    /**
     * Method to get the selected project and catch the name VERIFICAR
     */
    public void methodToCatchProjectName() {
        // Display Selected Node Text Into JTextFields
        TreeSelectionModel smd = jTreeProjects.getSelectionModel();
        if (smd.getSelectionCount() > 0) {
            DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) jTreeProjects.getSelectionPath().getLastPathComponent();
            String projectToErase = selectedNode.getUserObject().toString();
        }
    }

    /**
     * Method to add a new project to the JTree
     *
     * @param projectName to add on the JTree
     * @param gRed to add on controller open projects
     */
    public void joinedProjects(String projectName, GestionRed gRed) {
        DefaultMutableTreeNode selectedNode = carpetaRaiz;

        //Add on the principal Node the new node
        DefaultMutableTreeNode newNode = new DefaultMutableTreeNode(projectName);
        selectedNode.add(newNode);

        //Add on the controller the new open Network
        principal.listProjects.addPrimer(gRed);

        // Reload JTree model
        DefaultTreeModel model = (DefaultTreeModel) jTreeProjects.getModel();
        model.reload();

    }

    /**
     * Method to delete selected project file from JTree
     *
     * @throws java.io.IOException to control the exception
     */
    public void deleteProjects() throws IOException {
        try {
            DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) jTreeProjects.getSelectionPath().getLastPathComponent();

            if (selectedNode != jTreeProjects.getModel().getRoot()) {
                DefaultTreeModel model = (DefaultTreeModel) jTreeProjects.getModel();

                // Check if the selected node is in the project controller
                if (principal.listProjects.buscarElemento(selectedNode.getUserObject().toString()) != null) {
                    // Send the opened network to delete the archive
                    principal.deleteArchive(principal.listProjects.buscarElemento(selectedNode.getUserObject().toString()).getArchivoDeConfiguracionDeRed().getArchivo().getPath());

                    // Reload JTree model
                    model.removeNodeFromParent(selectedNode);
                    model.reload();
                } else {
                    System.out.println("No se encontro");
                }
            }
        } catch (NullPointerException e) {
            JOptionPane.showMessageDialog(null, "No ha seleccionado ningun proyecto para eliminar.", "Error al borrar el archivo ", HEIGHT);
        }// Catch the selected node

    }

    /**
     * Method to close the project on the JTree
     */
    private void closeProject() {
        try {
            DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) jTreeProjects.getSelectionPath().getLastPathComponent();

            if (selectedNode != jTreeProjects.getModel().getRoot()) {
                DefaultTreeModel model = (DefaultTreeModel) jTreeProjects.getModel();

                // Reload JTree model
                model.removeNodeFromParent(selectedNode);
                model.reload();
            }
        } catch (NullPointerException e) {
            JOptionPane.showMessageDialog(null, "No ha seleccionado ningun proyecto para cerrar.", "Error al cerrar", HEIGHT);
        }

    }
}
